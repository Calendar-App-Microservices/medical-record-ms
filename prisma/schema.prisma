// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Patient {
  id             String         @id @default(uuid()) @db.Uuid
  name           String
  email          String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  medicalRecords MedicalRecord[]
}

model MedicalRecord {
  id            String       @id @default(uuid()) @db.Uuid
  patientId     String       @db.Uuid
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  patient       Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  evolutions    Evolution[]
}

model Evolution {
  id              String        @id @default(uuid()) @db.Uuid
  medicalRecordId String        @db.Uuid
  professionalId  String        @db.Uuid
  note            String
  createdAt       DateTime      @default(now())
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id], onDelete: Cascade)
  //professional    Professional  @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

// Modelo de Professional (referencia desde auth, no se crea aqu√≠)
/*model Professional {
  id          String       @id @map("id") @db.Uuid
  name        String
  email       String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  evolutions  Evolution[]
}*/